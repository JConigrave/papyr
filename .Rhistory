library(papyr)
library(papyr)
plot_reg <- function(lm, x = NULL) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
} else{
pred = function_call$x
}
call  <- list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
coefs = coef(lm)
intercept <- coefs[[1]]
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
library(papyr)
library(papyr)
plot_reg(lm(mpg ~ wt, data = mtcars))
library(papyr)
library(papyr)
plot_reg(lm(mpg ~ wt, data = mtcars))
plot_reg(lm(mpg ~ wt*hp, data = mtcars))
plot_reg(lm(mpg ~ wt + disp, data = mtcars))
lm(mpg ~ wt + disp, data = mtcars)
lm(mpg ~ wt, data = mtcars)
plot_reg(lm(mpg ~ wt, data = mtcars))
stop::update_git("add plot_reg")
library(papyr)
lm = lm(mpg ~ hp - 1, data =mtcars)
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
plot_reg <- function(lm, x = NULL) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
if (is.null(x)) {
split = function(x, split)
trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
coefs = coef(lm)
intercept <- coefs[[1]]
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred
pred =  split(pred, "\\-")
pred
lm
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
coefs = coef(lm)
coefs
?grepkl
?grepl
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
intercept
slope = coefs[names(coefs) == pred]
slope
plot_reg <- function(lm, x = NULL) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg(lm(mpg ~ hp - 1, data = mtcars))
summary(lm(mpg ~ hp - 1, data = mtcars))
summary(lm(mpg ~ hp, data = mtcars))
summary(lm(scale(mpg) ~ hp, data = mtcars))
plot_reg(lm(scale(mpg) ~ hp, data = mtcars))
plot_reg(lm(scale(mpg) ~ hp - 1, data = mtcars))
plot_reg(lm(mpg ~ hp - 1, data = mtcars))
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg(lm(scale(mpg) ~ hp, data = mtcars))
plot_reg(lm(scale(mpg) ~ hp, data = mtcars))
plot_reg(lm(scale(mpg) ~ hp, data = mtcars))
plot_reg(lm(scale(mpg) ~ hp, data = mtcars))
plot_reg(lm(scale(mpg) ~ hp - 1, data = mtcars))
plot_reg(lm(mpg ~ hp - 1, data = mtcars))
plot_reg(lm(scale(mpg) ~ hp, data = mtcars))
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg(lm(mpg ~ hp, data = mtcars))
?plot
plot_reg <- function(lm, x = NULL, ...) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data, ...)
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
plot_reg(mpg ~ wt, data = mtcars)
args <- as.list(...)
list(1 = 1)
x = list(a = 1)
append(x, dog = "cat")
append(x, list(dog = "cat"))
append(x, list(dog = "cat", smile = "frown"))
plot_reg <- function(lm, x = NULL, ...) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
args <- as.list(...)
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
call = apend(call, args)
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg <- function(lm, x = NULL, ...) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
args <- as.list(...)
return(args)
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
call = apend(call, args)
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg <- function(lm, x = NULL, ...) {
function_call = match.call()
return(function_call)
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
args <- as.list(...)
return(args)
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
call = apend(call, args)
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg <- function(lm, x = NULL, ...) {
function_call = match.call()
form = as.formula(lm$call$formula)
return(function_call)
outcome = as.character(form[2])
args <- as.list(...)
return(args)
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
call = apend(call, args)
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg <- function(lm, x = NULL, ...) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
return(function_call)
args <- as.list(...)
return(args)
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
call = apend(call, args)
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg <- function(lm, x = NULL, ...) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
args <- list(...)
return(args)
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
call = apend(call, args)
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg(lm(mpg ~ hp, data = mtcars), test = "hello")
plot_reg <- function(lm, x = NULL, ...) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
args <- list(...)
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
call = apend(call, args)
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
plot_reg(lm(mpg ~ hp, data = mtcars), test = "hello")
plot_reg <- function(lm, x = NULL, ...) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
args <- list(...)
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
call = append(call, args)
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
plot_reg(lm(mpg ~ hp, data = mtcars), test = "hello")
plot_reg(lm(mpg ~ hp, data = mtcars), test = "hello")
plot_reg(lm(mpg ~ hp, data = mtcars), test = "hello")
warnings()
args
plot_reg <- function(lm, x = NULL, ...) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
args <- list(...)
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
if(length(args) > 1){
call = append(call, args)
}
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
args
plot_reg(lm(mpg ~ hp, data = mtcars), test = "hello")
plot_reg(lm(mpg ~ hp, data = mtcars), xlim = 0)
plot_reg(lm(mpg ~ hp, data = mtcars), xlim = c(0,0))
plot_reg(lm(mpg ~ hp, data = mtcars), xlim = c(0,0))
plot_reg <- function(lm, x = NULL, ...) {
function_call = match.call()
form = as.formula(lm$call$formula)
outcome = as.character(form[2])
args <- list(...)
if (is.null(x)) {
split = function(x, split) trimws(strsplit(x, split = split)[[1]][1])
pred = split(as.character(form[3]), split = "\\+")
pred =  split(pred, "\\*")
pred =  split(pred, "\\:")
pred =  split(pred, "\\-")
} else{
pred = function_call$x
}
call  <-
list(formula = as.formula(glue::glue("{outcome} ~ {pred}")),
data = lm$call$data)
if(length(args) > 0){
call = append(call, args)
}
coefs = coef(lm)
intercept <- coefs[grepl("intercept", names(coefs), ignore.case = T)]
intercept <- ifelse(length(intercept) == 0, 0 , intercept)
slope = coefs[names(coefs) == pred]
do.call(plot, call)
abline(a = intercept, b = slope)
}
plot_reg(lm(mpg ~ hp, data = mtcars), xlim = c(0,0))
plot_reg(lm(mpg ~ hp, data = mtcars), xlim = c(0,1))
plot_reg(lm(mpg ~ hp, data = mtcars), xlim = c(0,500))
library(papyr)
stop::update_git("add elipses")
library(papyr)
stop::update_git("add elipses")
plot_reg(lm(mpg ~ hp, data = mtcars))
require(papyr)
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg(lm(mpg ~ hp, data = mtcars), xlim = c(0,300))
mtcars
lm(mpg ~ am, data = mtcars)
summary(lm(mpg ~ am, data = mtcars))
summary(lm(mpg ~ factor(am), data = mtcars))
m1 = lm(mpg ~ factor(am), data = mtcars)
summary(m1)
sum(coef(m1))
coef(m1)[1]
mtcars$am[1:5]
dat <- mtcars$am[1:5]
dat <- mtcars[1:10,"am"]
dat
dat <- mtcars[1:10,"am", simplify = FALSE]
dat <- mtcars[1:10,"am", drop = FALSE]
dat
dat$manual = dat$am * -1
dat
dat <- mtcars[1:10,"am", drop = FALSE]
dat$manual = 1 - dat$am
dat
rowSums(dat)
dat$rowsum = rowSums(dat)
dat
lm(mpg ~ factor(am) - 1, data = mtcars)
summary(lm(mpg ~ factor(am) - 1, data = mtcars))
coef(m1)[1]
plot_reg(lm(hp ~ mpg, data = mtcars))
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg(lm(mpg ~ hp - 1, data = mtcars))
plot_reg(lm(mpg ~ hp, data = mtcars))
plot_reg(lm(scale(mpg) ~ hp, data = mtcars))
plot_reg(lm(mpg ~ hp - 1, data = mtcars))
plot_reg(lm(mpg ~ hp - 1, data = mtcars))
plot_reg(lm(scale(mpg) ~ hp -1 , data = mtcars))
library(papyr)
