winner <- check_winner(game_data, player = "B", ai = FALSE)
}
}
available = function(user_input){
is.na(eval(parse(text = glue::glue("game_data[{user_input}]"))))
}
update_board = function(row, col, player = "B") {
row = 4 - row - .5
col = col - .5
if(player == "A"){
color = "blue"
} else{
color = "red"
}
game_board + geom_point(data = data.frame(x = col, y = row), aes(x, y),
color = color, size = 10)
}
check_winner = function(gd, player = "A", ai = TRUE) {
cols <- lapply(1:3, function(x) {
sum(gd[, x] == player, na.rm = T)
})
rows <- lapply(1:3, function(x) {
sum(gd[x, ] == player, na.rm = T)
})
diag1 <- sum(diag(gd) == player, na.rm = T)
diag2 = sum(c(gd[1, 3],
gd[2, 2],
gd[3, 1]) == player, na.rm = T)
if(ai){
return(max(unlist(c(cols,rows,diag1,diag2))))
}
if (any(c(cols, rows, diag1, diag2) == 3 )) {
if(player == "B"){
message("Sorry, AI wins!")
break
}
message("Congratulations, you win!!")
return(TRUE)
}else{
return(FALSE)
}
}
ai = function(gd){
results <- data.frame(expand.grid(row = 1:3,col = 1:3))
check_score = function(gd, x, player) {
r = results[x, "row"]
c = results[x, "col"]
if (is.na(gd[r, c])) {
gd[r, c] = player
score <- check_winner(gd, player = player, ai = TRUE)
gd[r,c] = NA
score
}else{
NA
}
}
results$score = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "B")))
results$enemy = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "A")))
if(any(na.omit(results$score == 3))){
move = results[sample(which(results$score == 3),1), ]
return(move)
}
if(sum(results$enemy == 3,na.rm = T) > 0){
results = results[which(results$enemy == 3),]
}
move <- results[sample(which(results$score == max(results$score,na.rm = T)),1),]
move
}
require(ggplot2)
base = 3
game_board <- ggplot(aes = aes(1:base, 1:base))  +
geom_vline(xintercept  = base/3) +
geom_vline(xintercept  = base/3*2) +
geom_hline(yintercept = base/3) +
geom_hline(yintercept = base/3*2) +
scale_x_continuous(limits = c(0.2,base-.2)) +
scale_y_continuous(limits = c(0.2, base-.2))
print(game_board)
game_data <- matrix(ncol = 3, nrow = 3)
winner = FALSE
while(!winner){
user_input <- readline(prompt = "Where do you want to play (row,column)?")
made_move = 0
while(made_move == 0) {
if (!available(user_input)) {
message(user_input, " is taken, try somewhere else")
user_input <-
readline(prompt = "Where do you want to play (row,column)?\n")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row,col] = 'A'
game_board = update_board(row,col, player = "A")
print(game_board)
winner <- check_winner(game_data, player = "A", ai = FALSE)
if(winner) break
message("AI moving...")
move = unlist(ai(game_data)[,1:2])
game_data[move[1], move[2]] = "B"
game_board = update_board(move[1],move[2], player = "B")
print(game_board)
winner <- check_winner(game_data, player = "B", ai = FALSE)
}
require(ggplot2)
base = 3
game_board <- ggplot(aes = aes(1:base, 1:base))  +
geom_vline(xintercept  = base/3) +
geom_vline(xintercept  = base/3*2) +
geom_hline(yintercept = base/3) +
geom_hline(yintercept = base/3*2) +
scale_x_continuous(limits = c(0.2,base-.2)) +
scale_y_continuous(limits = c(0.2, base-.2))
print(game_board)
game_data <- matrix(ncol = 3, nrow = 3)
winner = FALSE
while(!winner){
user_input <- readline(prompt = "Where do you want to play (row,column)?")
made_move = 0
while(made_move == 0) {
if (!available(user_input)) {
message(user_input, " is taken, try somewhere else")
user_input <-
readline(prompt = "Where do you want to play (row,column)?\n")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row,col] = 'A'
game_board = update_board(row,col, player = "A")
print(game_board)
winner <- check_winner(game_data, player = "A", ai = FALSE)
if(winner) break
message("AI moving...")
move = unlist(ai(game_data)[,1:2])
game_data[move[1], move[2]] = "B"
game_board = update_board(move[1],move[2], player = "B")
print(game_board)
winner <- check_winner(game_data, player = "B", ai = FALSE)
}
gd = game_data
results <- data.frame(expand.grid(row = 1:3,col = 1:3))
rsults
results
check_score = function(gd, x, player) {
r = results[x, "row"]
c = results[x, "col"]
if (is.na(gd[r, c])) {
gd[r, c] = player
score <- check_winner(gd, player = player, ai = TRUE)
gd[r,c] = NA
score
}else{
NA
}
}
results$score = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "B")))
results$enemy = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "A")))
results
x = 3
player = "B"
r = results[x, "row"]
c = results[x, "col"]
if (is.na(gd[r, c])) {
gd[r, c] = player
score <- check_winner(gd, player = player, ai = TRUE)
gd[r,c] = NA
score
}else{
NA
}
gd
r
c
results$score = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "B")))
results$enemy = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "A")))
any(na.omit(results$score == 3))
any(na.omit(results$score == 3)))
which(results$score == 3)
move = results[sample(which(results$score == 3),1), ]
move
which(results$score == 3)
results
sample(which(results$score == 3),1)
results$score
which(results$score == 3)
sample(which(results$score == 3),1)
sample(which(results$score == 3),1)
sample(which(results$score == 3),1)
?sample
sample(x = which(results$score == 3),1)
sample(x = which(results$score == 3),1)
sample(x = which(results$score == 3),1)
sample(x = which(results$score == 3),1)
sample(x = which(results$score == 3),1)
sample(x = which(results$score == 3),1)
sample(x = which(results$score == 3),1)
sample(x = which(results$score == 3),1)
sample(x = which(results$score == 3),1)
sample(x = which(results$score == 3),1)
sample(c(9),1)
sample(c(9,8),1)
sample(c(9,8),1)
sample(c(9,8),1)
sample(c(9,8),1)
sample(c(9,8),1)
sample(c(9,8),1)
sample(c(9,8),1)
sample(c(9,8),1)
sample(c(9,8),1)
sample(c(9,8),1)
sample(c(9,8),1)
which(results$score == 3)[1]
which(results$score == 3)[1]
which(results$score == 3)[1]
which(results$score == 3)[1]
which(results$score == 3)[1]
ai = function(gd){
results <- data.frame(expand.grid(row = 1:3,col = 1:3))
check_score = function(gd, x, player) {
r = results[x, "row"]
c = results[x, "col"]
if (is.na(gd[r, c])) {
gd[r, c] = player
score <- check_winner(gd, player = player, ai = TRUE)
gd[r,c] = NA
score
}else{
NA
}
}
results$score = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "B")))
results$enemy = unlist(lapply(seq_along(results[,1]), function(i) check_score(gd, i, "A")))
if(any(na.omit(results$score == 3))){
move = results[which(results$score == 3)[1], ]
return(move)
}
if(sum(results$enemy == 3,na.rm = T) > 0){
results = results[which(results$enemy == 3),]
}
move <- results[sample(which(results$score == max(results$score,na.rm = T)),1),]
move
}
require(ggplot2)
base = 3
game_board <- ggplot(aes = aes(1:base, 1:base))  +
geom_vline(xintercept  = base/3) +
geom_vline(xintercept  = base/3*2) +
geom_hline(yintercept = base/3) +
geom_hline(yintercept = base/3*2) +
scale_x_continuous(limits = c(0.2,base-.2)) +
scale_y_continuous(limits = c(0.2, base-.2))
print(game_board)
game_data <- matrix(ncol = 3, nrow = 3)
winner = FALSE
while(!winner){
user_input <- readline(prompt = "Where do you want to play (row,column)?")
made_move = 0
while(made_move == 0) {
if (!available(user_input)) {
message(user_input, " is taken, try somewhere else")
user_input <-
readline(prompt = "Where do you want to play (row,column)?\n")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row,col] = 'A'
game_board = update_board(row,col, player = "A")
print(game_board)
winner <- check_winner(game_data, player = "A", ai = FALSE)
if(winner) break
message("AI moving...")
move = unlist(ai(game_data)[,1:2])
game_data[move[1], move[2]] = "B"
game_board = update_board(move[1],move[2], player = "B")
print(game_board)
winner <- check_winner(game_data, player = "B", ai = FALSE)
}
require(ggplot2)
base = 3
game_board <- ggplot(aes = aes(1:base, 1:base))  +
geom_vline(xintercept  = base/3) +
geom_vline(xintercept  = base/3*2) +
geom_hline(yintercept = base/3) +
geom_hline(yintercept = base/3*2) +
scale_x_continuous(limits = c(0.2,base-.2)) +
scale_y_continuous(limits = c(0.2, base-.2))
print(game_board)
game_data <- matrix(ncol = 3, nrow = 3)
winner = FALSE
while(!winner){
user_input <- readline(prompt = "Where do you want to play (row,column)?")
made_move = 0
while(made_move == 0) {
if (!available(user_input)) {
message(user_input, " is taken, try somewhere else")
user_input <-
readline(prompt = "Where do you want to play (row,column)?\n")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row,col] = 'A'
game_board = update_board(row,col, player = "A")
print(game_board)
winner <- check_winner(game_data, player = "A", ai = FALSE)
message("AI moving...")
move = unlist(ai(game_data)[,1:2])
game_data[move[1], move[2]] = "B"
game_board = update_board(move[1],move[2], player = "B")
print(game_board)
winner <- check_winner(game_data, player = "B", ai = FALSE)
}
!is.na(game_board)
sum(!is.na(game_board)) == 9)
sum(!is.na(game_board))
sum(!is.na(game_board)) == 9
require(ggplot2)
base = 3
game_board <- ggplot(aes = aes(1:base, 1:base))  +
geom_vline(xintercept  = base/3) +
geom_vline(xintercept  = base/3*2) +
geom_hline(yintercept = base/3) +
geom_hline(yintercept = base/3*2) +
scale_x_continuous(limits = c(0.2,base-.2)) +
scale_y_continuous(limits = c(0.2, base-.2))
print(game_board)
game_data <- matrix(ncol = 3, nrow = 3)
winner = FALSE
while(!winner){
user_input <- readline(prompt = "Where do you want to play (row,column)?")
made_move = 0
while(made_move == 0) {
if (!available(user_input)) {
message(user_input, " is taken, try somewhere else")
user_input <-
readline(prompt = "Where do you want to play (row,column)?\n")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row,col] = 'A'
game_board = update_board(row,col, player = "A")
print(game_board)
winner <- check_winner(game_data, player = "A", ai = FALSE)
message("AI moving...")
move = unlist(ai(game_data)[,1:2])
game_data[move[1], move[2]] = "B"
game_board = update_board(move[1],move[2], player = "B")
print(game_board)
winner <- check_winner(game_data, player = "B", ai = FALSE)
if(sum(!is.na(game_board)) == 9){
winner = TRUE
message("DRAW!")
}
}
require(ggplot2)
base = 3
game_board <- ggplot(aes = aes(1:base, 1:base))  +
geom_vline(xintercept  = base/3) +
geom_vline(xintercept  = base/3*2) +
geom_hline(yintercept = base/3) +
geom_hline(yintercept = base/3*2) +
scale_x_continuous(limits = c(0.2,base-.2)) +
scale_y_continuous(limits = c(0.2, base-.2))
print(game_board)
game_data <- matrix(ncol = 3, nrow = 3)
winner = FALSE
while(!winner){
user_input <- readline(prompt = "Where do you want to play (row,column)?")
made_move = 0
while(made_move == 0) {
if (!available(user_input)) {
message(user_input, " is taken, try somewhere else")
user_input <-
readline(prompt = "Where do you want to play (row,column)?\n")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row,col] = 'A'
game_board = update_board(row,col, player = "A")
print(game_board)
winner <- check_winner(game_data, player = "A", ai = FALSE)
message("AI moving...")
move = unlist(ai(game_data)[,1:2])
game_data[move[1], move[2]] = "B"
game_board = update_board(move[1],move[2], player = "B")
print(game_board)
winner <- check_winner(game_data, player = "B", ai = FALSE)
if(sum(!is.na(game_data)) == 9){
winner = TRUE
message("DRAW!")
}
}
if(sum(!is.na(game_data)) == 9){
winner = TRUE
message("DRAW!")
}
winner <- check_winner(game_data, player = "B", ai = FALSE)
move = unlist(ai(game_data)[,1:2])
game_data
sum(!is.na(game_data)) == 9
require(ggplot2)
base = 3
game_board <- ggplot(aes = aes(1:base, 1:base))  +
geom_vline(xintercept  = base/3) +
geom_vline(xintercept  = base/3*2) +
geom_hline(yintercept = base/3) +
geom_hline(yintercept = base/3*2) +
scale_x_continuous(limits = c(0.2,base-.2)) +
scale_y_continuous(limits = c(0.2, base-.2))
print(game_board)
game_data <- matrix(ncol = 3, nrow = 3)
winner = FALSE
while(!winner) {
user_input <-
readline(prompt = "Where do you want to play (row,column)?")
made_move = 0
while (made_move == 0) {
if (!available(user_input)) {
message(user_input, " is taken, try somewhere else")
user_input <-
readline(prompt = "Where do you want to play (row,column)?\n")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row, col] = 'A'
game_board = update_board(row, col, player = "A")
print(game_board)
winner <- check_winner(game_data, player = "A", ai = FALSE)
message("AI moving...")
move = unlist(ai(game_data)[, 1:2])
game_data[move[1], move[2]] = "B"
game_board = update_board(move[1], move[2], player = "B")
print(game_board)
winner <- check_winner(game_data, player = "B", ai = FALSE)
if (sum(!is.na(game_data)) == 9) {
winner <- TRUE
message("DRAW!")
}
}
u
u
u
require(ggplot2)
base = 3
game_board <- ggplot(aes = aes(1:base, 1:base))  +
geom_vline(xintercept  = base/3) +
geom_vline(xintercept  = base/3*2) +
geom_hline(yintercept = base/3) +
geom_hline(yintercept = base/3*2) +
scale_x_continuous(limits = c(0.2,base-.2)) +
scale_y_continuous(limits = c(0.2, base-.2))
print(game_board)
game_data <- matrix(ncol = 3, nrow = 3)
winner = FALSE
while(!winner) {
user_input <-
readline(prompt = "Where do you want to play (row,column)?")
made_move = 0
while (made_move == 0) {
if (!available(user_input)) {
message(user_input, " is taken, try somewhere else")
user_input <-
readline(prompt = "Where do you want to play (row,column)?\n")
} else{
made_move = 1
}
}
moves <- strsplit(user_input, split = ",")[[1]]
row = as.numeric(trimws(moves[1]))
col = as.numeric(trimws(moves[2]))
game_data[row, col] = 'A'
game_board = update_board(row, col, player = "A")
print(game_board)
winner <- check_winner(game_data, player = "A", ai = FALSE)
if (sum(!is.na(game_data)) == 9) {
winner <- TRUE
message("DRAW!")
next
}
message("AI moving...")
move = unlist(ai(game_data)[, 1:2])
game_data[move[1], move[2]] = "B"
game_board = update_board(move[1], move[2], player = "B")
print(game_board)
winner <- check_winner(game_data, player = "B", ai = FALSE)
}
